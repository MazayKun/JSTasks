// –ö–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
const UNSELECTED = 0;
const SELECTED = 1;
const WRONG = 2;
const SOLVED = 3;

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç (–∫–∞—Ä—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–Ω–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã —Ä—É–±–∞—à–∫–æ–π –≤–Ω–∏–∑)
var uncertainCardsNumber = 0;
// –í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É 
var time = 60;

// –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
var isClicked = false;

// –ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç —Å –≤–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const cards = Array.from(document.querySelectorAll('.card'));

// –û–±—ä–µ–∫—Ç —Ç–∞–π–º–µ—Ä–∞ 
const timer = document.querySelector('.timer');
timer.textContent = '0' + (time - time % 60)/60 + ':' + ((time < 10) ? '0' + time : (time % 60 < 10)? '0' + time % 60 : time % 60 );

// –ö–Ω–æ–ø–∫–∞ play again
const playBtn = document.querySelector('.play');

// –û–∫–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
const endGame = document.querySelector('.end_game');

// –ú–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞—Ä—Ç
var conditions = shuffleCards(cards);

cards.forEach(card => {
        card.addEventListener('click', clickOnCard);
    }
)
playBtn.addEventListener('click', newGame);
var intervalId; 

// ---------------------–°–µ–∫—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π---------------------------

// –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ 
function clickOnCard(event) {
    if(!isClicked) {
        isClicked = true;
        intervalId = setInterval(gameIter, 1000); 
    }
    // –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∫–ª–∏–∫–æ–º –ø–æ –Ω–µ–π
    if(conditions[cards.indexOf(this)]['state'] == SELECTED && uncertainCardsNumber == 1) {
        uncertainCardsNumber = 0;
        conditions[cards.indexOf(this)]['state'] = UNSELECTED;
        this.classList.toggle('flip');
        this.classList.toggle('unflip');
        return;
    }
    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–º
    if(conditions[cards.indexOf(this)]['state'] != UNSELECTED) {
        return;
    }
    // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∞–ª–∞ —Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö
    if (!this.classList.contains('flip') && !this.classList.contains('unflip')) {
        this.classList.add('flip');
    }else{
        this.classList.toggle('flip');
        this.classList.toggle('unflip');
    }

    // –í—ã–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ 
    // (–ê–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã —Ä—É–±–∞—à–∫–æ–π –≤–Ω–∏–∑ –±–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏ –∫–∞—Ä—Ç—ã, –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–º)
    switch (uncertainCardsNumber) {
        // –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–µ—Ç, —Ç–∞–∫ —á—Ç–æ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä—É–±–∞—à–∫–æ–π –≤–Ω–∏–∑
        case 0: {
            uncertainCardsNumber++;
            conditions[cards.indexOf(this)]['state'] = SELECTED;
            break;
        }
        // –û–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ –±—ã–ª–∞, –º—ã —Å–º–æ—Ç—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∏–∫–Ω—É—Ç–∞—è –µ–µ –ø–∞—Ä–æ–π
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞—Ä–∞, —Ç–æ –æ–Ω–∏ –æ–±–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è –∑–µ–ª–µ–Ω—ã–º
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞—Ä–∞, —Ç–æ –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º
        case 1: {
            var index = cards.indexOf(this);
            if(conditions[conditions[index]['pair']]['state'] == SELECTED) {
                conditions[conditions[index]['pair']]['state'] = SOLVED;
                conditions[index]['state'] = SOLVED;
                cards[index].classList.add('right-flip');
                cards[conditions[index]['pair']].classList.add('right');
                cards[index].classList.remove('flip');
                cards[conditions[index]['pair']].classList.remove('flip');
                uncertainCardsNumber = 0;
                if(hasWon()) {
                    win();
                }
            }else {
                for (var i = 0 ; i < 12; i++) {
                    if(conditions[i]['state'] == SELECTED) {
                        conditions[i]['state'] = WRONG;
                        cards[i].classList.add('wrong');
                    }
                }
                cards[index].classList.add('wrong-flip');
                conditions[index]['state'] = WRONG;
                uncertainCardsNumber++;
            } 
            break;
        }
        // –ù–∞ —Å—Ç–æ–ª–µ 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç—ã, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –±—ã–ª–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–∞—Ä–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
        // –ê 2 –∫—Ä–∞—Å–Ω—ã–µ —Ç–µ—Ä—è—é—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        case 2: {
            for (var i = 0; i < 12; i++) {
                if(conditions[i]['state'] == WRONG) {
                    conditions[i]['state'] = UNSELECTED;
                    cards[i].classList.remove('wrong');
                    cards[i].classList.remove('wrong-flip');
                    cards[i].classList.remove('flip');
                    cards[i].classList.add('unflip');
                }
            }
            conditions[cards.indexOf(this)]['state'] = SELECTED;
            uncertainCardsNumber = 1;
            break;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É play again
function newGame() {
    uncertainCardsNumber = 0
    conditions = shuffleCards();
    for (var card of cards) {
        card.classList.remove('flip');
        card.classList.remove('unflip');
        card.classList.remove('wrong');
        card.classList.remove('right');
        card.classList.remove('wrong-flip');
        card.classList.remove('right-flip');
    }
    time = 60;
    timer.textContent = '0' + (time - time % 60)/60 + ':' + ((time < 10) ? '0' + time : (time % 60 < 10)? '0' + time % 60 : time % 60 );
    isClicked = false;
    endGame.classList.add('invisible');
    document.querySelector('.jump:nth-child(4)').classList.remove('invisible');
}

// –§—É–Ω–∫—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä 599 —Å–µ–∫—É–Ω–¥—ã)
function gameIter() {
    time--;
    timer.textContent = '0' + (time - time % 60)/60 + ':' + ((time < 10) ? '0' + time : (time % 60 < 10)? '0' + time % 60 : time % 60 );
    if(time == 0) {
        clearInterval(intervalId);
        timeIsOver();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
function shuffleCards() {
    var cardsNumbers = [];
    var conditions = []
    for (var i = 0; i < 12; i++) {
        cardsNumbers.push(i);
        conditions.push({});
    }
    var emoji = ['üêô','ü¶Ä','üêì','üê∑','üê∏','ü¶Ñ'];
    for (var em of emoji) {
        var first = cardsNumbers.splice(getRndInt(cardsNumbers.length), 1);
        cards[first].textContent = em;
        var second = cardsNumbers.splice(getRndInt(cardsNumbers.length), 1);
        cards[second].textContent = em;
        conditions[first] = {'pair' : second, 'state' : UNSELECTED};
        conditions[second] = {'pair' : first, 'state' : UNSELECTED};
    }
    return conditions;
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –≤ –∏–≥—Ä
function win() {
    showResult(true);
    clearInterval(intervalId);
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ 
function timeIsOver() {
    showResult(false);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
function hasWon() {
    for (var condition of conditions) {
        if(condition['state'] != SOLVED) {
            return false;
        }
    }
    return true;
}

// –§—É–Ω—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –≤–∏–¥–∏–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (true=win, false=lose)
function showResult(res) {
    var spans = Array.from(document.querySelectorAll('.jump'));
    var letters;
    if(res) {
        playBtn.textContent = 'Play again';
        letters = ['W', 'i', 'n'];
        spans[3].classList.add('invisible');
    }else{
        playBtn.textContent = 'Try again';
        letters = ['L', 'o', 's', 'e'];
    }
    for (var i = 0; i < letters.length; i++) {
        spans[i].textContent = letters[i];
    }
    endGame.classList.remove('invisible');
}

// –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ max (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
function getRndInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}